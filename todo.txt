Третья версия доклада:


0. сократить про бэм
— уменьшение связности уход от сайдэффектов
— переиспользования блоков
— паралельная разрабатка/рендеринг
— тестирование
    — тупо сравнить html diff
    — отрендерить и сравнить look&feel поблочно (в разных состояниях, и тд)


0.1 bem-xjst
— bemhtml?
— бэм ориентирован
— xsl + js


1. Шаблоны не привязаны к структуре данных (pattern matching)
    1.1. паттерн матчинг в CSS

    1.2. демо, что шаблоны не привязаны к структуре данных. «как css+html, в любом месте где вы укажете данные, они раскасятся шаблоном как html при помощи css без каскада». а в pull подходе вы фактически пишете шаблоны в стиле как inline css

2. часть работы делается за вас для вас:
    2.1. обход входных данных (bemjson content)
    2.2. дефолтный рендеринг (html -теги, -классы и -атрибуты)
    2.3. поддержка i-bem



3. data + call template VS bemjson
    3.1. IF HELL
        В случае hb придется проверять одно и тоже условие в нескольких местах в шаблоне. Это наружает dry и снижает читабельность. include/import/extend не спасают — потому что они не решают задачу.

    3.2. call temp компенсируют недостаток промежуточного преобразования данных во view-данные. Получается, что эти вы и так делаете преобразование данных во view-ориентированные данные, когда пишете pull-шаблоны.

+ OK


4. Хелпер wrap для HTML-обёрток.
Защита от рекурсии.
    block('b1').wrap()({ block: 'b2' });
    block('b2').wrap()({ block: 'b1' });


5. Для html-верстальщиков и верстающих дизайнеров — PSD to HTML — можно делать статику bemjson+bemhtml.
    при этом удобно проверять вариативность состояний макета
    {block: ‘username’, content: ‘Костантин Константинопольский’ }
    {block: ‘username’, content: ‘Яша Шац’ }


6. Для html-верстальщиков и всех остальных: 
    написать библиотеку простых шаблонов и реиспользовать
    bem-components

7. Точки расширения
    tag mix js cls

7. bemhtml удобен для рендеринга отдельных частей страницы или маленьких блоков
можно использовать для асинхронного обновления страницы.
    удобно, потому что bemjson можно расделить на фрагменты, которые и полностью достаточны для рендеринга отдельного блока




P.S. Тем, кто знаком со старым BEMHTML:

Changelog c bemhtml 1.x … bem-xjst 5.0.0
1. Шаблоны на чистом JS 
— парсеры/конверторы/линтеры шаблонов,
— node и браузеры как среда исполнения без стадии компиляции,
— множество разработчиков на рынке уже знакомых с языком (профит для найма)

2. Нет компиляции шаблонов

К докладу
    Опыт команды картинок: https://sbmaxx.at.yandex-team.ru/2188
    — уменьшилось время полной сборки в teamcity
    — Пересборка в development режиме также значительно ускорилась.
    — Благодаря JS-синтаксису bemhtml мы можем запускать jshint и jscs для шаблонов. 
    — Отсутствие компиляции даёт нам возможность удобной отладки как с помощью console.log, так и с помощью node-debugger и devtools


3. Работает и в браузерах и на node.js

4. Новая дока на гитхабе на «русском-понятном» языке

